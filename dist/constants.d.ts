/**
 * Serves the role of the = padding character in this version of base64.
 * The index into the string is how many excess bits were needed to pad out the last sextet.
 */
export declare const base64LeftoverBitsMap = " +=$#%";
/** A mapping from sextet -> base64 character */
export declare const base64EncodeMap: {
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
    5: string;
    6: string;
    7: string;
    8: string;
    9: string;
    10: string;
    11: string;
    12: string;
    13: string;
    14: string;
    15: string;
    16: string;
    17: string;
    18: string;
    19: string;
    20: string;
    21: string;
    22: string;
    23: string;
    24: string;
    25: string;
    26: string;
    27: string;
    28: string;
    29: string;
    30: string;
    31: string;
    32: string;
    33: string;
    34: string;
    35: string;
    36: string;
    37: string;
    38: string;
    39: string;
    40: string;
    41: string;
    42: string;
    43: string;
    44: string;
    45: string;
    46: string;
    47: string;
    48: string;
    49: string;
    50: string;
    51: string;
    52: string;
    53: string;
    54: string;
    55: string;
    56: string;
    57: string;
    58: string;
    59: string;
    60: string;
    61: string;
    62: string;
    63: string;
};
/** A mapping from base64 character -> array of bits */
export declare const base64DecodeMap: {
    readonly A: readonly [false, false, false, false, false, false];
    readonly B: readonly [false, false, false, false, false, true];
    readonly C: readonly [false, false, false, false, true, false];
    readonly D: readonly [false, false, false, false, true, true];
    readonly E: readonly [false, false, false, true, false, false];
    readonly F: readonly [false, false, false, true, false, true];
    readonly G: readonly [false, false, false, true, true, false];
    readonly H: readonly [false, false, false, true, true, true];
    readonly I: readonly [false, false, true, false, false, false];
    readonly J: readonly [false, false, true, false, false, true];
    readonly K: readonly [false, false, true, false, true, false];
    readonly L: readonly [false, false, true, false, true, true];
    readonly M: readonly [false, false, true, true, false, false];
    readonly N: readonly [false, false, true, true, false, true];
    readonly O: readonly [false, false, true, true, true, false];
    readonly P: readonly [false, false, true, true, true, true];
    readonly Q: readonly [false, true, false, false, false, false];
    readonly R: readonly [false, true, false, false, false, true];
    readonly S: readonly [false, true, false, false, true, false];
    readonly T: readonly [false, true, false, false, true, true];
    readonly U: readonly [false, true, false, true, false, false];
    readonly V: readonly [false, true, false, true, false, true];
    readonly W: readonly [false, true, false, true, true, false];
    readonly X: readonly [false, true, false, true, true, true];
    readonly Y: readonly [false, true, true, false, false, false];
    readonly Z: readonly [false, true, true, false, false, true];
    readonly a: readonly [false, true, true, false, true, false];
    readonly b: readonly [false, true, true, false, true, true];
    readonly c: readonly [false, true, true, true, false, false];
    readonly d: readonly [false, true, true, true, false, true];
    readonly e: readonly [false, true, true, true, true, false];
    readonly f: readonly [false, true, true, true, true, true];
    readonly g: readonly [true, false, false, false, false, false];
    readonly h: readonly [true, false, false, false, false, true];
    readonly i: readonly [true, false, false, false, true, false];
    readonly j: readonly [true, false, false, false, true, true];
    readonly k: readonly [true, false, false, true, false, false];
    readonly l: readonly [true, false, false, true, false, true];
    readonly m: readonly [true, false, false, true, true, false];
    readonly n: readonly [true, false, false, true, true, true];
    readonly o: readonly [true, false, true, false, false, false];
    readonly p: readonly [true, false, true, false, false, true];
    readonly q: readonly [true, false, true, false, true, false];
    readonly r: readonly [true, false, true, false, true, true];
    readonly s: readonly [true, false, true, true, false, false];
    readonly t: readonly [true, false, true, true, false, true];
    readonly u: readonly [true, false, true, true, true, false];
    readonly v: readonly [true, false, true, true, true, true];
    readonly w: readonly [true, true, false, false, false, false];
    readonly x: readonly [true, true, false, false, false, true];
    readonly y: readonly [true, true, false, false, true, false];
    readonly z: readonly [true, true, false, false, true, true];
    readonly "0": readonly [true, true, false, true, false, false];
    readonly "1": readonly [true, true, false, true, false, true];
    readonly "2": readonly [true, true, false, true, true, false];
    readonly "3": readonly [true, true, false, true, true, true];
    readonly "4": readonly [true, true, true, false, false, false];
    readonly "5": readonly [true, true, true, false, false, true];
    readonly "6": readonly [true, true, true, false, true, false];
    readonly "7": readonly [true, true, true, false, true, true];
    readonly "8": readonly [true, true, true, true, false, false];
    readonly "9": readonly [true, true, true, true, false, true];
    readonly "-": readonly [true, true, true, true, true, false];
    readonly _: readonly [true, true, true, true, true, true];
};
//# sourceMappingURL=constants.d.ts.map